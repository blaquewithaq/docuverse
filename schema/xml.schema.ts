/* eslint-disable ts/no-use-before-define */
import type { Page, PageCodeLine, PageDescription, PageDocBlockQuote, PageDocCaption, PageDocCopy, PageDocDetails, PageDocDotMsc, PageDocEntry, PageDocExtendedMarkup, PageDocHeading, PageDocImage, PageDocImageFile, PageDocInternal, PageDocLanguage, PageDocList, PageDocListItem, PageDocMarkup, PageDocMarkupCommon, PageDocParagraph, PageDocParameterList, PageDocParameterListItem, PageDocParameterName, PageDocParameterNameList, PageDocParameterType, PageDocParBlock, PageDocPlantuml, PageDocReferenceText, PageDocRow, PageDocSection, PageDocSimpleSect, PageDocSummary, PageDocTable, PageDocTitle, PageDocTocItem, PageDocTocList, PageDocURLLink, PageDocVariableList, PageDocVariableListEntry, PageDocXRefSect, PageEnumValue, PageHighlight, PageItem, PageLinkedText, PageMemberDef, PageParameter, PageProgramListing, PageSection, PageTableOfContents, PageTableOfContentsName, PageTableOfContentsSection, PageTemplateParamList, XMLDocument } from "./xml.d"
// Generated by ts-to-zod
import { z } from "zod"

export const doxyfileDefaultSchema = z.union([
  z.literal("no"),
  z.literal("yes"),
])

export const doxyfileTypeSchema = z.union([
  z.literal("bool"),
  z.literal("int"),
  z.literal("string"),
  z.literal("stringlist"),
])

export const pageAccessorSchema = z.union([
  z.literal("retain"),
  z.literal("copy"),
  z.literal("assign"),
  z.literal("weak"),
  z.literal("strong"),
  z.literal("unretained"),
])

export const pageAlignSchema = z.union([
  z.literal("left"),
  z.literal("right"),
  z.literal("center"),
])

export const pageBoolSchema = z.union([z.literal("yes"), z.literal("no")])

export const pageCheckSchema = z.union([
  z.literal("checked"),
  z.literal("unchecked"),
])

export const pageGraphRelationSchema = z.union([
  z.literal("include"),
  z.literal("usage"),
  z.literal("template-instance"),
  z.literal("public-inheritance"),
  z.literal("protected-inheritance"),
  z.literal("private-inheritance"),
  z.literal("type-constraint"),
])

export const pageHighlightClassSchema = z.union([
  z.literal("comment"),
  z.literal("normal"),
  z.literal("preprocessor"),
  z.literal("keyword"),
  z.literal("keywordtype"),
  z.literal("keywordflow"),
  z.literal("stringliteral"),
  z.literal("xmlcdata"),
  z.literal("charliteral"),
  z.literal("vhdlkeyword"),
  z.literal("vhdllogic"),
  z.literal("vhdlchar"),
  z.literal("vhdldigit"),
])

export const pageImageKindSchema = z.union([
  z.literal("html"),
  z.literal("latex"),
  z.literal("docbook"),
  z.literal("rtf"),
  z.literal("xml"),
])

export const pageItemKindSchema = z.union([
  z.literal("class"),
  z.literal("struct"),
  z.literal("union"),
  z.literal("interface"),
  z.literal("protocol"),
  z.literal("category"),
  z.literal("exception"),
  z.literal("service"),
  z.literal("singleton"),
  z.literal("module"),
  z.literal("type"),
  z.literal("file"),
  z.literal("namespace"),
  z.literal("group"),
  z.literal("page"),
  z.literal("example"),
  z.literal("dir"),
  z.literal("concept"),
])

export const pageLanguageSchema = z.union([
  z.literal("Unknown"),
  z.literal("IDL"),
  z.literal("Java"),
  z.literal("C#"),
  z.literal("D"),
  z.literal("PHP"),
  z.literal("Objective-C"),
  z.literal("C++"),
  z.literal("JavaScript"),
  z.literal("Python"),
  z.literal("Fortran"),
  z.literal("VHDL"),
  z.literal("XML"),
  z.literal("SQL"),
  z.literal("Markdown"),
  z.literal("Slice"),
  z.literal("Lex"),
])

export const pageMemberDefKindSchema = z.union([
  z.literal("define"),
  z.literal("property"),
  z.literal("event"),
  z.literal("variable"),
  z.literal("typedef"),
  z.literal("enum"),
  z.literal("function"),
  z.literal("signal"),
  z.literal("prototype"),
  z.literal("friend"),
  z.literal("dcop"),
  z.literal("slot"),
  z.literal("interface"),
  z.literal("service"),
])

export const pageMemberKindSchema = z.union([
  z.literal("define"),
  z.literal("property"),
  z.literal("event"),
  z.literal("variable"),
  z.literal("typedef"),
  z.literal("enum"),
  z.literal("enumvalue"),
  z.literal("function"),
  z.literal("signal"),
  z.literal("prototype"),
  z.literal("friend"),
  z.literal("dcop"),
  z.literal("slot"),
])

export const pageOlSchema = z.union([
  z.literal("1"),
  z.literal("a"),
  z.literal("A"),
  z.literal("i"),
  z.literal("I"),
])

export const pageParameterDirSchema = z.union([
  z.literal("in"),
  z.literal("out"),
  z.literal("inout"),
])

export const pageParameterListKindSchema = z.union([
  z.literal("param"),
  z.literal("retval"),
  z.literal("exception"),
  z.literal("templateparam"),
])

export const pagePlantumlEngineSchema = z.union([
  z.literal("uml"),
  z.literal("bpm"),
  z.literal("wire"),
  z.literal("dot"),
  z.literal("ditaa"),
  z.literal("salt"),
  z.literal("math"),
  z.literal("latex"),
  z.literal("gantt"),
  z.literal("mindmap"),
  z.literal("wbs"),
  z.literal("yaml"),
  z.literal("creole"),
  z.literal("json"),
  z.literal("flow"),
  z.literal("board"),
  z.literal("git"),
  z.literal("hcl"),
  z.literal("regex"),
  z.literal("ebnf"),
  z.literal("files"),
])

export const pageProtectionKindSchema = z.union([
  z.literal("public"),
  z.literal("protected"),
  z.literal("private"),
  z.literal("package"),
])

export const pageReferenceKindSchema = z.union([
  z.literal("compound"),
  z.literal("member"),
])

export const pageRefQualifierKindSchema = z.union([
  z.literal("lvalue"),
  z.literal("rvalue"),
])

export const pageSectionKindSchema = z.union([
  z.literal("user-defined"),
  z.literal("public-type"),
  z.literal("public-func"),
  z.literal("public-attrib"),
  z.literal("public-slot"),
  z.literal("signal"),
  z.literal("dcop-func"),
  z.literal("property"),
  z.literal("event"),
  z.literal("public-static-func"),
  z.literal("public-static-attrib"),
  z.literal("protected-type"),
  z.literal("protected-func"),
  z.literal("protected-attrib"),
  z.literal("protected-slot"),
  z.literal("protected-static-func"),
  z.literal("protected-static-attrib"),
  z.literal("package-type"),
  z.literal("package-func"),
  z.literal("package-attrib"),
  z.literal("package-static-func"),
  z.literal("package-static-attrib"),
  z.literal("private-type"),
  z.literal("private-func"),
  z.literal("private-attrib"),
  z.literal("private-slot"),
  z.literal("private-static-func"),
  z.literal("private-static-attrib"),
  z.literal("friend"),
  z.literal("related"),
  z.literal("define"),
  z.literal("prototype"),
  z.literal("typedef"),
  z.literal("enum"),
  z.literal("func"),
  z.literal("var"),
])

export const pageSimpleSectKindSchema = z.union([
  z.literal("see"),
  z.literal("return"),
  z.literal("author"),
  z.literal("authors"),
  z.literal("version"),
  z.literal("since"),
  z.literal("date"),
  z.literal("note"),
  z.literal("warning"),
  z.literal("pre"),
  z.literal("post"),
  z.literal("copyright"),
  z.literal("invariant"),
  z.literal("remark"),
  z.literal("attention"),
  z.literal("important"),
  z.literal("par"),
  z.literal("rcs"),
])

export const pageVerticalAlignSchema = z.union([
  z.literal("bottom"),
  z.literal("top"),
  z.literal("middle"),
])

export const pageVirtualKindSchema = z.union([
  z.literal("non-virtual"),
  z.literal("virtual"),
  z.literal("pure-virtual"),
])

export const pageBaseCompoundReferenceSchema = z.object({
  href: z.string().optional(),
  protection: pageProtectionKindSchema.optional(),
  virtual: pageVirtualKindSchema.optional(),
})

export const pageChildnodeSchema = z.object({
  edgeLabels: z.array(z.string()).optional(),
  href: z.union([z.string(), z.number()]).optional(),
  relation: pageGraphRelationSchema.optional(),
})

export const pageDocAnchorSchema = z.object({
  id: z.string().optional(),
})

export const pageDocEmojiSchema = z.object({
  name: z.string().optional(),
  unicode: z.string().optional(),
})

export const pageDocFormulaSchema = z.object({
  id: z.string().optional(),
})

export const pageDocHtmlOnlySchema = z.object({
  block: z.string().optional(),
})

export const pageDocEmptySchema = z.object({})

export const pageDocIndexEntrySchema = z.object({
  primary: z.string().optional(),
  secondary: z.string().optional(),
})

export const pageExportSchema = z.object({
  href: z.string().optional(),
})

export const pageExportsSchema = z.object({
  exports: z.array(pageExportSchema).optional(),
})

export const pageIncludeSchema = z.object({
  href: z.string().optional(),
  local: z.boolean().optional(),
  text: z.string().optional(),
})

export const pageReferenceSchema = z.object({
  href: z.string().optional(),
  inline: z.boolean().optional(),
  prot: pageProtectionKindSchema.optional(),
  text: z.string().optional(),
})

export const pageLocationSchema = z.object({
  href: z.string().optional(),
})

export const pageLinkSchema = z.object({
  external: z.string().optional(),
  href: z.string().optional(),
})

export const pageMemberReferenceSchema = z.object({
  ambiguityScope: z.string().optional(),
  href: z.string().optional(),
  name: z.string().optional(),
  protection: pageProtectionKindSchema.optional(),
  scope: z.string().optional(),
  virtual: pageVirtualKindSchema.optional(),
})

export const pageMemberSchema = z.object({
  href: z.string().optional(),
  kind: pageMemberKindSchema.optional(),
  name: z.string().optional(),
})

export const pageNodeSchema = z.object({
  children: z.array(pageChildnodeSchema).optional(),
  id: z.union([z.string(), z.number()]).optional(),
  label: z.string().optional(),
  link: pageLinkSchema.optional(),
})

export const indexPageKindSchema = z.union([
  z.literal("category"),
  z.literal("class"),
  z.literal("concept"),
  z.literal("dir"),
  z.literal("example"),
  z.literal("exception"),
  z.literal("file"),
  z.literal("group"),
  z.literal("interface"),
  z.literal("module"),
  z.literal("namespace"),
  z.literal("page"),
  z.literal("protocol"),
  z.literal("struct"),
  z.literal("type"),
  z.literal("union"),
])

export const indexMemberKindSchema = z.union([
  z.literal("dcop"),
  z.literal("define"),
  z.literal("enum"),
  z.literal("enumvalue"),
  z.literal("event"),
  z.literal("friend"),
  z.literal("function"),
  z.literal("property"),
  z.literal("prototype"),
  z.literal("signal"),
  z.literal("slot"),
  z.literal("typedef"),
  z.literal("variable"),
])

export const doxyfileOptionSchema = z.object({
  values: z.array(z.union([z.string(), z.number()])).optional(),
  id: z.string().optional(),
  default: doxyfileDefaultSchema.optional(),
  type: doxyfileTypeSchema.optional(),
})

export const pageGraphSchema = z.object({
  nodes: z.array(pageNodeSchema).optional(),
})

export const pageListOfAllMembersSchema = z.object({
  members: z.array(pageMemberReferenceSchema).optional(),
})

export const doxyfileSchema = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  options: z.array(doxyfileOptionSchema).optional(),
  language: z.string().optional(),
})

export const indexMemberSchema = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  href: z.string().optional(),
  kind: indexMemberKindSchema.optional(),
})

export const indexPageSchema = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  members: z.array(indexMemberSchema).optional(),
  href: z.string().optional(),
  kind: indexPageKindSchema.optional(),
})

export const indexSchema = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  pages: z.array(indexPageSchema).optional(),
  language: z.string().optional(),
})

export const pageSchema: z.ZodSchema<Page> = z.lazy(() => z.object({
  description: z.string().optional(),
  items: z.array(pageItemSchema).optional(),
  lang: z.string().optional(),
  title: z.string().optional(),
}).refine(obj => obj.description || obj.items || obj.lang || obj.title, {
  message: "At least one of 'description', 'items', 'lang', 'title' must be defined",
}),
)

export const pageItemSchema: z.ZodSchema<PageItem> = z.lazy(() => z.object({
  abstract: z.boolean().optional(),
  baseCompoundReferences: z.array(pageBaseCompoundReferenceSchema).optional(),
  briefDescription: pageDescriptionSchema.optional(),
  collaborationGraph: pageGraphSchema.optional(),
  derivedCompoundReferences: z
    .array(pageBaseCompoundReferenceSchema)
    .optional(),
  detailedDescription: pageDescriptionSchema.optional(),
  exports: pageExportsSchema.optional(),
  final: z.boolean().optional(),
  id: z.string().optional(),
  includeDependencyGraph: pageGraphSchema.optional(),
  includedBy: z.array(pageIncludeSchema).optional(),
  includes: z.array(pageIncludeSchema).optional(),
  inheritanceGraph: pageGraphSchema.optional(),
  initializer: pageLinkedTextSchema.optional(),
  inline: z.boolean().optional(),
  innerClasses: z.array(pageReferenceSchema).optional(),
  innerConcepts: z.array(pageReferenceSchema).optional(),
  innerDirs: z.array(pageReferenceSchema).optional(),
  innerFiles: z.array(pageReferenceSchema).optional(),
  innerGroups: z.array(pageReferenceSchema).optional(),
  innerModules: z.array(pageReferenceSchema).optional(),
  innerNamespaces: z.array(pageReferenceSchema).optional(),
  innerPages: z.array(pageReferenceSchema).optional(),
  inverseIncludeDependencyGraph: pageGraphSchema.optional(),
  kind: pageItemKindSchema.optional(),
  language: pageLanguageSchema.optional(),
  listOfAllMembers: pageListOfAllMembersSchema.optional(),
  location: pageLocationSchema.optional(),
  name: z.string().optional(),
  programListings: z.array(pageProgramListingSchema).optional(),
  protection: pageProtectionKindSchema.optional(),
  qualifiers: z.array(z.string()).optional(),
  requiresClause: pageLinkedTextSchema.optional(),
  sealed: z.boolean().optional(),
  sections: z.array(pageSectionSchema).optional(),
  tableOfContents: pageTableOfContentsSchema.optional(),
  templateParamList: pageTemplateParamListSchema.optional(),
  title: z.string().optional(),
}).refine(obj => obj.abstract || obj.baseCompoundReferences || obj.briefDescription || obj.collaborationGraph || obj.derivedCompoundReferences || obj.detailedDescription || obj.exports || obj.final || obj.id || obj.includeDependencyGraph || obj.includedBy || obj.includes || obj.inheritanceGraph || obj.initializer || obj.inline || obj.innerClasses || obj.innerConcepts || obj.innerDirs || obj.innerFiles || obj.innerGroups || obj.innerModules || obj.innerNamespaces || obj.innerPages || obj.inverseIncludeDependencyGraph || obj.kind || obj.language || obj.listOfAllMembers || obj.location || obj.name || obj.programListings || obj.protection || obj.qualifiers || obj.requiresClause || obj.sealed || obj.sections || obj.tableOfContents || obj.templateParamList || obj.title, {
  message: "At least one of 'abstract', 'baseCompoundReferences', 'briefDescription', 'collaborationGraph', 'derivedCompoundReferences', 'detailedDescription', 'exports', 'final', 'id', 'includeDependencyGraph', 'includedBy', 'includes', 'inheritanceGraph', 'initializer', 'inline', 'innerClasses', 'innerConcepts', 'innerDirs', 'innerFiles', 'innerGroups', 'innerModules', 'innerNamespaces', 'innerPages', 'inverseIncludeDependencyGraph', 'kind', 'language', 'listOfAllMembers', 'location', 'name', 'programListings', 'protection', 'qualifiers', 'requiresClause', 'sealed', 'sections', 'tableOfContents', 'templateParamList', 'title' must be defined",
}),
)

export const pageCodeLineSchema: z.ZodSchema<PageCodeLine> = z.lazy(() => z.object({
  external: z.boolean().optional(),
  highlights: z.array(pageHighlightSchema).optional(),
  href: z.string().optional(),
  lineno: z.number().optional(),
  refKind: pageReferenceKindSchema.optional(),
}).refine(obj => obj.external || obj.highlights || obj.href || obj.lineno || obj.refKind, {
  message: "At least one of 'external', 'highlights', 'href', 'lineno', 'refKind' must be defined",
}),
)

export const pageHighlightSchema: z.ZodSchema<PageHighlight> = z.lazy(() => z.object({
  class: pageHighlightClassSchema.optional(),
  ref: z.array(pageDocReferenceTextSchema).optional(),
  sp: z.array(z.unknown()).optional(),
}).refine(obj => obj.class || obj.ref || obj.sp, {
  message: "At least one of 'class', 'ref', 'sp' must be defined",
}),
)

export const pageDescriptionSchema: z.ZodSchema<PageDescription> = z.lazy(() => z.object({
  internals: z.array(pageDocInternalSchema).optional(),
  paragraphs: z.array(pageDocParagraphSchema).optional(),
  sections: z.array(pageDocSectionSchema).optional(),
  title: z.string().optional(),
}).refine(obj => obj.internals || obj.paragraphs || obj.sections || obj.title, {
  message: "At least one of 'internals', 'paragraphs', 'sections', 'title' must be defined",
}),
)

export const pageDocInternalSchema: z.ZodSchema<PageDocInternal> = z.lazy(() => z.object({
  paragraphs: z.array(pageDocInternalSchema).optional(),
  sections: z.array(pageDocSectionSchema).optional(),
}).refine(obj => obj.paragraphs || obj.sections, {
  message: "At least one of 'paragraphs', 'sections' must be defined",
}),
)

export const pageDocParagraphSchema: z.ZodSchema<PageDocParagraph> = z.lazy(() => z.object({
  anchor: z.array(pageDocAnchorSchema).optional(),
  bold: z.array(pageDocMarkupSchema).optional(),
  center: z.array(pageDocMarkupSchema).optional(),
  cite: z.array(pageDocMarkupSchema).optional(),
  computerOutput: z.array(pageDocMarkupSchema).optional(),
  del: z.array(pageDocMarkupSchema).optional(),
  docbookOnly: z.array(z.string()).optional(),
  dot: z.array(pageDocDotMscSchema).optional(),
  emoji: z.array(pageDocEmojiSchema).optional(),
  emphasis: z.array(pageDocMarkupSchema).optional(),
  formula: z.array(pageDocFormulaSchema).optional(),
  htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
  image: z.array(pageDocImageSchema).optional(),
  ins: z.array(pageDocMarkupSchema).optional(),
  latexOnly: z.array(z.string()).optional(),
  linebreak: z.array(pageDocEmptySchema).optional(),
  manOnly: z.array(z.string()).optional(),
  msc: z.array(pageDocDotMscSchema).optional(),
  plantuml: z.array(pageDocPlantumlSchema).optional(),
  ref: z.array(pageDocReferenceTextSchema).optional(),
  rtfOnly: z.array(z.string()).optional(),
  s: z.array(pageDocMarkupSchema).optional(),
  small: z.array(pageDocMarkupSchema).optional(),
  strike: z.array(pageDocMarkupSchema).optional(),
  subscript: z.array(pageDocMarkupSchema).optional(),
  superscript: z.array(pageDocMarkupSchema).optional(),
  uLink: z.array(pageDocURLLinkSchema).optional(),
  underline: z.array(pageDocMarkupSchema).optional(),
  xmlOnly: z.array(z.string()).optional(),
  blockquote: z.array(pageDocBlockQuoteSchema).optional(),
  copyDoc: z.array(pageDocCopySchema).optional(),
  details: z.array(pageDocDetailsSchema).optional(),
  diaFile: z.array(pageDocImageFileSchema).optional(),
  dotFile: z.array(pageDocImageFileSchema).optional(),
  heading: z.array(pageDocHeadingSchema).optional(),
  hRuler: z.array(pageDocEmptySchema).optional(),
  indexEntry: z.array(pageDocIndexEntrySchema).optional(),
  itemizedList: z.array(pageDocListSchema).optional(),
  javadocCode: z.array(z.string()).optional(),
  javadocLiteral: z.array(z.string()).optional(),
  language: z.array(pageDocLanguageSchema).optional(),
  orderedList: z.array(pageDocListSchema).optional(),
  parameterList: z.array(pageDocParameterListSchema).optional(),
  parBlock: z.array(pageDocParBlockSchema).optional(),
  plantumlFile: z.array(pageDocImageFileSchema).optional(),
  preformatted: z.array(pageDocMarkupSchema).optional(),
  programListing: z.array(pageProgramListingSchema).optional(),
  simpleSect: z.array(pageDocSimpleSectSchema).optional(),
  table: z.array(pageDocTableSchema).optional(),
  title: z.array(pageDocTitleSchema).optional(),
  tocList: z.array(pageDocTocListSchema).optional(),
  variableList: z.array(pageDocVariableListSchema).optional(),
  verbatim: z.array(z.string()).optional(),
  xRefSect: z.array(pageDocXRefSectSchema).optional(),
}).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly || obj.blockquote || obj.copyDoc || obj.details || obj.diaFile || obj.dotFile || obj.heading || obj.hRuler || obj.indexEntry || obj.itemizedList || obj.javadocCode || obj.javadocLiteral || obj.language || obj.orderedList || obj.parameterList || obj.parBlock || obj.plantumlFile || obj.preformatted || obj.programListing || obj.simpleSect || obj.table || obj.title || obj.tocList || obj.variableList || obj.verbatim || obj.xRefSect, {
  message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly', 'blockquote', 'copyDoc', 'details', 'diaFile', 'dotFile', 'heading', 'hRuler', 'indexEntry', 'itemizedList', 'javadocCode', 'javadocLiteral', 'language', 'orderedList', 'parameterList', 'parBlock', 'plantumlFile', 'preformatted', 'programListing', 'simpleSect', 'table', 'title', 'tocList', 'variableList', 'verbatim', 'xRefSect' must be defined",
}),
)

export const pageDocSectionSchema: z.ZodSchema<PageDocSection> = z.lazy(() => z.object({
  id: z.string().optional(),
  internals: z.array(pageDocInternalSchema).optional(),
  paragraphs: z.array(pageDocParagraphSchema).optional(),
  sections: z.array(pageDocSectionSchema).optional(),
  title: pageDocTitleSchema.optional(),
}).refine(obj => obj.id || obj.internals || obj.paragraphs || obj.sections || obj.title, {
  message: "At least one of 'id', 'internals', 'paragraphs', 'sections', 'title' must be defined",
}),
)

export const pageDocBlockQuoteSchema: z.ZodSchema<PageDocBlockQuote> = z.lazy(() => z.object({
  paragraphs: z.array(pageDocParagraphSchema).optional(),
}).refine(obj => obj.paragraphs, {
  message: "At least one of 'paragraphs' must be defined",
}),
)

export const pageDocCaptionSchema: z.ZodSchema<PageDocCaption> = z.lazy(() => z.object({
  anchor: z.array(pageDocAnchorSchema).optional(),
  bold: z.array(pageDocMarkupSchema).optional(),
  center: z.array(pageDocMarkupSchema).optional(),
  cite: z.array(pageDocMarkupSchema).optional(),
  computerOutput: z.array(pageDocMarkupSchema).optional(),
  del: z.array(pageDocMarkupSchema).optional(),
  docbookOnly: z.array(z.string()).optional(),
  dot: z.array(pageDocDotMscSchema).optional(),
  emoji: z.array(pageDocEmojiSchema).optional(),
  emphasis: z.array(pageDocMarkupSchema).optional(),
  formula: z.array(pageDocFormulaSchema).optional(),
  htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
  image: z.array(pageDocImageSchema).optional(),
  ins: z.array(pageDocMarkupSchema).optional(),
  latexOnly: z.array(z.string()).optional(),
  linebreak: z.array(pageDocEmptySchema).optional(),
  manOnly: z.array(z.string()).optional(),
  msc: z.array(pageDocDotMscSchema).optional(),
  plantuml: z.array(pageDocPlantumlSchema).optional(),
  ref: z.array(pageDocReferenceTextSchema).optional(),
  rtfOnly: z.array(z.string()).optional(),
  s: z.array(pageDocMarkupSchema).optional(),
  small: z.array(pageDocMarkupSchema).optional(),
  strike: z.array(pageDocMarkupSchema).optional(),
  subscript: z.array(pageDocMarkupSchema).optional(),
  superscript: z.array(pageDocMarkupSchema).optional(),
  uLink: z.array(pageDocURLLinkSchema).optional(),
  underline: z.array(pageDocMarkupSchema).optional(),
  xmlOnly: z.array(z.string()).optional(),
  id: z.string().optional(),
}).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly || obj.id, {
  message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly', 'id' must be defined",
}),
)

export const pageDocMarkupSchema: z.ZodSchema<PageDocMarkup> = z.lazy(() => z.object({
  anchor: z.array(pageDocAnchorSchema).optional(),
  bold: z.array(pageDocMarkupSchema).optional(),
  center: z.array(pageDocMarkupSchema).optional(),
  cite: z.array(pageDocMarkupSchema).optional(),
  computerOutput: z.array(pageDocMarkupSchema).optional(),
  del: z.array(pageDocMarkupSchema).optional(),
  docbookOnly: z.array(z.string()).optional(),
  dot: z.array(pageDocDotMscSchema).optional(),
  emoji: z.array(pageDocEmojiSchema).optional(),
  emphasis: z.array(pageDocMarkupSchema).optional(),
  formula: z.array(pageDocFormulaSchema).optional(),
  htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
  image: z.array(pageDocImageSchema).optional(),
  ins: z.array(pageDocMarkupSchema).optional(),
  latexOnly: z.array(z.string()).optional(),
  linebreak: z.array(pageDocEmptySchema).optional(),
  manOnly: z.array(z.string()).optional(),
  msc: z.array(pageDocDotMscSchema).optional(),
  plantuml: z.array(pageDocPlantumlSchema).optional(),
  ref: z.array(pageDocReferenceTextSchema).optional(),
  rtfOnly: z.array(z.string()).optional(),
  s: z.array(pageDocMarkupSchema).optional(),
  small: z.array(pageDocMarkupSchema).optional(),
  strike: z.array(pageDocMarkupSchema).optional(),
  subscript: z.array(pageDocMarkupSchema).optional(),
  superscript: z.array(pageDocMarkupSchema).optional(),
  uLink: z.array(pageDocURLLinkSchema).optional(),
  underline: z.array(pageDocMarkupSchema).optional(),
  xmlOnly: z.array(z.string()).optional(),
  blockquote: z.array(pageDocBlockQuoteSchema).optional(),
  copyDoc: z.array(pageDocCopySchema).optional(),
  details: z.array(pageDocDetailsSchema).optional(),
  diaFile: z.array(pageDocImageFileSchema).optional(),
  dotFile: z.array(pageDocImageFileSchema).optional(),
  heading: z.array(pageDocHeadingSchema).optional(),
  hRuler: z.array(pageDocEmptySchema).optional(),
  indexEntry: z.array(pageDocIndexEntrySchema).optional(),
  itemizedList: z.array(pageDocListSchema).optional(),
  javadocCode: z.array(z.string()).optional(),
  javadocLiteral: z.array(z.string()).optional(),
  language: z.array(pageDocLanguageSchema).optional(),
  orderedList: z.array(pageDocListSchema).optional(),
  parameterList: z.array(pageDocParameterListSchema).optional(),
  parBlock: z.array(pageDocParBlockSchema).optional(),
  plantumlFile: z.array(pageDocImageFileSchema).optional(),
  preformatted: z.array(pageDocMarkupSchema).optional(),
  programListing: z.array(pageProgramListingSchema).optional(),
  simpleSect: z.array(pageDocSimpleSectSchema).optional(),
  table: z.array(pageDocTableSchema).optional(),
  title: z.array(pageDocTitleSchema).optional(),
  tocList: z.array(pageDocTocListSchema).optional(),
  variableList: z.array(pageDocVariableListSchema).optional(),
  verbatim: z.array(z.string()).optional(),
  xRefSect: z.array(pageDocXRefSectSchema).optional(),
}).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly || obj.blockquote || obj.copyDoc || obj.details || obj.diaFile || obj.dotFile || obj.heading || obj.hRuler || obj.indexEntry || obj.itemizedList || obj.javadocCode || obj.javadocLiteral || obj.language || obj.orderedList || obj.parameterList || obj.parBlock || obj.plantumlFile || obj.preformatted || obj.programListing || obj.simpleSect || obj.table || obj.title || obj.tocList || obj.variableList || obj.verbatim || obj.xRefSect, {
  message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly', 'blockquote', 'copyDoc', 'details', 'diaFile', 'dotFile', 'heading', 'hRuler', 'indexEntry', 'itemizedList', 'javadocCode', 'javadocLiteral', 'language', 'orderedList', 'parameterList', 'parBlock', 'plantumlFile', 'preformatted', 'programListing', 'simpleSect', 'table', 'title', 'tocList', 'variableList', 'verbatim', 'xRefSect' must be defined",
}),
)

export const pageDocDotMscSchema: z.ZodSchema<PageDocDotMsc> = z.lazy(() => z.object({
  anchor: z.array(pageDocAnchorSchema).optional(),
  bold: z.array(pageDocMarkupSchema).optional(),
  center: z.array(pageDocMarkupSchema).optional(),
  cite: z.array(pageDocMarkupSchema).optional(),
  computerOutput: z.array(pageDocMarkupSchema).optional(),
  del: z.array(pageDocMarkupSchema).optional(),
  docbookOnly: z.array(z.string()).optional(),
  dot: z.array(pageDocDotMscSchema).optional(),
  emoji: z.array(pageDocEmojiSchema).optional(),
  emphasis: z.array(pageDocMarkupSchema).optional(),
  formula: z.array(pageDocFormulaSchema).optional(),
  htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
  image: z.array(pageDocImageSchema).optional(),
  ins: z.array(pageDocMarkupSchema).optional(),
  latexOnly: z.array(z.string()).optional(),
  linebreak: z.array(pageDocEmptySchema).optional(),
  manOnly: z.array(z.string()).optional(),
  msc: z.array(pageDocDotMscSchema).optional(),
  plantuml: z.array(pageDocPlantumlSchema).optional(),
  ref: z.array(pageDocReferenceTextSchema).optional(),
  rtfOnly: z.array(z.string()).optional(),
  s: z.array(pageDocMarkupSchema).optional(),
  small: z.array(pageDocMarkupSchema).optional(),
  strike: z.array(pageDocMarkupSchema).optional(),
  subscript: z.array(pageDocMarkupSchema).optional(),
  superscript: z.array(pageDocMarkupSchema).optional(),
  uLink: z.array(pageDocURLLinkSchema).optional(),
  underline: z.array(pageDocMarkupSchema).optional(),
  xmlOnly: z.array(z.string()).optional(),
  caption: z.string().optional(),
  height: z.string().optional(),
  name: z.string().optional(),
  width: z.string().optional(),
}).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly || obj.caption || obj.height || obj.name || obj.width, {
  message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly', 'caption', 'height', 'name', 'width' must be defined",
}),
)

export const pageDocImageSchema: z.ZodSchema<PageDocImage> = z.lazy(() => z.object({
  anchor: z.array(pageDocAnchorSchema).optional(),
  bold: z.array(pageDocMarkupSchema).optional(),
  center: z.array(pageDocMarkupSchema).optional(),
  cite: z.array(pageDocMarkupSchema).optional(),
  computerOutput: z.array(pageDocMarkupSchema).optional(),
  del: z.array(pageDocMarkupSchema).optional(),
  docbookOnly: z.array(z.string()).optional(),
  dot: z.array(pageDocDotMscSchema).optional(),
  emoji: z.array(pageDocEmojiSchema).optional(),
  emphasis: z.array(pageDocMarkupSchema).optional(),
  formula: z.array(pageDocFormulaSchema).optional(),
  htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
  image: z.array(pageDocImageSchema).optional(),
  ins: z.array(pageDocMarkupSchema).optional(),
  latexOnly: z.array(z.string()).optional(),
  linebreak: z.array(pageDocEmptySchema).optional(),
  manOnly: z.array(z.string()).optional(),
  msc: z.array(pageDocDotMscSchema).optional(),
  plantuml: z.array(pageDocPlantumlSchema).optional(),
  ref: z.array(pageDocReferenceTextSchema).optional(),
  rtfOnly: z.array(z.string()).optional(),
  s: z.array(pageDocMarkupSchema).optional(),
  small: z.array(pageDocMarkupSchema).optional(),
  strike: z.array(pageDocMarkupSchema).optional(),
  subscript: z.array(pageDocMarkupSchema).optional(),
  superscript: z.array(pageDocMarkupSchema).optional(),
  uLink: z.array(pageDocURLLinkSchema).optional(),
  underline: z.array(pageDocMarkupSchema).optional(),
  xmlOnly: z.array(z.string()).optional(),
  alt: z.string().optional(),
  caption: z.string().optional(),
  height: z.string().optional(),
  inline: pageBoolSchema.optional(),
  name: z.string().optional(),
  type: pageImageKindSchema.optional(),
  width: z.string().optional(),
}).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly || obj.alt || obj.caption || obj.height || obj.inline || obj.name || obj.type || obj.width, {
  message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly', 'alt', 'caption', 'height', 'inline', 'name', 'type', 'width' must be defined",
}),
)

export const pageDocPlantumlSchema: z.ZodSchema<PageDocPlantuml> = z.lazy(() => z.object({
  anchor: z.array(pageDocAnchorSchema).optional(),
  bold: z.array(pageDocMarkupSchema).optional(),
  center: z.array(pageDocMarkupSchema).optional(),
  cite: z.array(pageDocMarkupSchema).optional(),
  computerOutput: z.array(pageDocMarkupSchema).optional(),
  del: z.array(pageDocMarkupSchema).optional(),
  docbookOnly: z.array(z.string()).optional(),
  dot: z.array(pageDocDotMscSchema).optional(),
  emoji: z.array(pageDocEmojiSchema).optional(),
  emphasis: z.array(pageDocMarkupSchema).optional(),
  formula: z.array(pageDocFormulaSchema).optional(),
  htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
  image: z.array(pageDocImageSchema).optional(),
  ins: z.array(pageDocMarkupSchema).optional(),
  latexOnly: z.array(z.string()).optional(),
  linebreak: z.array(pageDocEmptySchema).optional(),
  manOnly: z.array(z.string()).optional(),
  msc: z.array(pageDocDotMscSchema).optional(),
  plantuml: z.array(pageDocPlantumlSchema).optional(),
  ref: z.array(pageDocReferenceTextSchema).optional(),
  rtfOnly: z.array(z.string()).optional(),
  s: z.array(pageDocMarkupSchema).optional(),
  small: z.array(pageDocMarkupSchema).optional(),
  strike: z.array(pageDocMarkupSchema).optional(),
  subscript: z.array(pageDocMarkupSchema).optional(),
  superscript: z.array(pageDocMarkupSchema).optional(),
  uLink: z.array(pageDocURLLinkSchema).optional(),
  underline: z.array(pageDocMarkupSchema).optional(),
  xmlOnly: z.array(z.string()).optional(),
  caption: z.string().optional(),
  engine: pagePlantumlEngineSchema.optional(),
  height: z.string().optional(),
  name: z.string().optional(),
  width: z.string().optional(),
}).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly || obj.caption || obj.engine || obj.height || obj.name || obj.width, {
  message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly', 'caption', 'engine', 'height', 'name', 'width' must be defined",
}),
)

export const pageDocReferenceTextSchema: z.ZodSchema<PageDocReferenceText>
  = z.lazy(() => z.object({
    anchor: z.array(pageDocAnchorSchema).optional(),
    bold: z.array(pageDocMarkupSchema).optional(),
    center: z.array(pageDocMarkupSchema).optional(),
    cite: z.array(pageDocMarkupSchema).optional(),
    computerOutput: z.array(pageDocMarkupSchema).optional(),
    del: z.array(pageDocMarkupSchema).optional(),
    docbookOnly: z.array(z.string()).optional(),
    dot: z.array(pageDocDotMscSchema).optional(),
    emoji: z.array(pageDocEmojiSchema).optional(),
    emphasis: z.array(pageDocMarkupSchema).optional(),
    formula: z.array(pageDocFormulaSchema).optional(),
    htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
    image: z.array(pageDocImageSchema).optional(),
    ins: z.array(pageDocMarkupSchema).optional(),
    latexOnly: z.array(z.string()).optional(),
    linebreak: z.array(pageDocEmptySchema).optional(),
    manOnly: z.array(z.string()).optional(),
    msc: z.array(pageDocDotMscSchema).optional(),
    plantuml: z.array(pageDocPlantumlSchema).optional(),
    ref: z.array(pageDocReferenceTextSchema).optional(),
    rtfOnly: z.array(z.string()).optional(),
    s: z.array(pageDocMarkupSchema).optional(),
    small: z.array(pageDocMarkupSchema).optional(),
    strike: z.array(pageDocMarkupSchema).optional(),
    subscript: z.array(pageDocMarkupSchema).optional(),
    superscript: z.array(pageDocMarkupSchema).optional(),
    uLink: z.array(pageDocURLLinkSchema).optional(),
    underline: z.array(pageDocMarkupSchema).optional(),
    xmlOnly: z.array(z.string()).optional(),
    external: z.boolean().optional(),
    href: z.string().optional(),
    kindReference: pageReferenceKindSchema.optional(),
  }).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly || obj.external || obj.href || obj.kindReference, {
    message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly', 'external', 'href', 'kindReference' must be defined",
  }),
  )

export const pageDocURLLinkSchema: z.ZodSchema<PageDocURLLink> = z.lazy(() => z.object({
  anchor: z.array(pageDocAnchorSchema).optional(),
  bold: z.array(pageDocMarkupSchema).optional(),
  center: z.array(pageDocMarkupSchema).optional(),
  cite: z.array(pageDocMarkupSchema).optional(),
  computerOutput: z.array(pageDocMarkupSchema).optional(),
  del: z.array(pageDocMarkupSchema).optional(),
  docbookOnly: z.array(z.string()).optional(),
  dot: z.array(pageDocDotMscSchema).optional(),
  emoji: z.array(pageDocEmojiSchema).optional(),
  emphasis: z.array(pageDocMarkupSchema).optional(),
  formula: z.array(pageDocFormulaSchema).optional(),
  htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
  image: z.array(pageDocImageSchema).optional(),
  ins: z.array(pageDocMarkupSchema).optional(),
  latexOnly: z.array(z.string()).optional(),
  linebreak: z.array(pageDocEmptySchema).optional(),
  manOnly: z.array(z.string()).optional(),
  msc: z.array(pageDocDotMscSchema).optional(),
  plantuml: z.array(pageDocPlantumlSchema).optional(),
  ref: z.array(pageDocReferenceTextSchema).optional(),
  rtfOnly: z.array(z.string()).optional(),
  s: z.array(pageDocMarkupSchema).optional(),
  small: z.array(pageDocMarkupSchema).optional(),
  strike: z.array(pageDocMarkupSchema).optional(),
  subscript: z.array(pageDocMarkupSchema).optional(),
  superscript: z.array(pageDocMarkupSchema).optional(),
  uLink: z.array(pageDocURLLinkSchema).optional(),
  underline: z.array(pageDocMarkupSchema).optional(),
  xmlOnly: z.array(z.string()).optional(),
  href: z.string().optional(),
}).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly || obj.href, {
  message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly', 'href' must be defined",
}),
)

export const pageDocCopySchema: z.ZodSchema<PageDocCopy> = z.lazy(() => z.object({
  internal: pageDocInternalSchema.optional(),
  link: z.string().optional(),
  paragraphs: z.array(pageDocParagraphSchema).optional(),
  sections: z.array(pageDocSectionSchema).optional(),
}).refine(obj => obj.internal || obj.link || obj.paragraphs || obj.sections, {
  message: "At least one of 'internal', 'link', 'paragraphs', 'sections' must be defined",
}),
)

export const pageDocDetailsSchema: z.ZodSchema<PageDocDetails> = z.lazy(() => z.object({
  paragraphs: z.array(pageDocParagraphSchema).optional(),
  summary: pageDocSummarySchema.optional(),
}).refine(obj => obj.paragraphs || obj.summary, {
  message: "At least one of 'paragraphs', 'summary' must be defined",
}),
)

export const pageDocSummarySchema: z.ZodSchema<PageDocSummary> = z.lazy(() => z.object({
  anchor: z.array(pageDocAnchorSchema).optional(),
  bold: z.array(pageDocMarkupSchema).optional(),
  center: z.array(pageDocMarkupSchema).optional(),
  cite: z.array(pageDocMarkupSchema).optional(),
  computerOutput: z.array(pageDocMarkupSchema).optional(),
  del: z.array(pageDocMarkupSchema).optional(),
  docbookOnly: z.array(z.string()).optional(),
  dot: z.array(pageDocDotMscSchema).optional(),
  emoji: z.array(pageDocEmojiSchema).optional(),
  emphasis: z.array(pageDocMarkupSchema).optional(),
  formula: z.array(pageDocFormulaSchema).optional(),
  htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
  image: z.array(pageDocImageSchema).optional(),
  ins: z.array(pageDocMarkupSchema).optional(),
  latexOnly: z.array(z.string()).optional(),
  linebreak: z.array(pageDocEmptySchema).optional(),
  manOnly: z.array(z.string()).optional(),
  msc: z.array(pageDocDotMscSchema).optional(),
  plantuml: z.array(pageDocPlantumlSchema).optional(),
  ref: z.array(pageDocReferenceTextSchema).optional(),
  rtfOnly: z.array(z.string()).optional(),
  s: z.array(pageDocMarkupSchema).optional(),
  small: z.array(pageDocMarkupSchema).optional(),
  strike: z.array(pageDocMarkupSchema).optional(),
  subscript: z.array(pageDocMarkupSchema).optional(),
  superscript: z.array(pageDocMarkupSchema).optional(),
  uLink: z.array(pageDocURLLinkSchema).optional(),
  underline: z.array(pageDocMarkupSchema).optional(),
  xmlOnly: z.array(z.string()).optional(),
}).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly, {
  message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly' must be defined",
}),
)

export const pageDocEntrySchema: z.ZodSchema<PageDocEntry> = z.lazy(() => z.object({
  align: pageAlignSchema.optional(),
  class: z.string().optional(),
  colspan: z.number().optional(),
  paragraphs: z.array(pageDocParagraphSchema).optional(),
  rowSpan: z.number().optional(),
  thead: pageBoolSchema.optional(),
  valign: pageVerticalAlignSchema.optional(),
  width: z.string().optional(),
}).refine(obj => obj.align || obj.class || obj.colspan || obj.paragraphs || obj.rowSpan || obj.thead || obj.valign || obj.width, {
  message: "At least one of 'align', 'class', 'colspan', 'paragraphs', 'rowSpan', 'thead', 'valign', 'width' must be defined",
}),
)

export const pageDocExtendedMarkupSchema: z.ZodSchema<PageDocExtendedMarkup>
  = z.lazy(() => z.object({
    anchor: z.array(pageDocAnchorSchema).optional(),
    bold: z.array(pageDocMarkupSchema).optional(),
    center: z.array(pageDocMarkupSchema).optional(),
    cite: z.array(pageDocMarkupSchema).optional(),
    computerOutput: z.array(pageDocMarkupSchema).optional(),
    del: z.array(pageDocMarkupSchema).optional(),
    docbookOnly: z.array(z.string()).optional(),
    dot: z.array(pageDocDotMscSchema).optional(),
    emoji: z.array(pageDocEmojiSchema).optional(),
    emphasis: z.array(pageDocMarkupSchema).optional(),
    formula: z.array(pageDocFormulaSchema).optional(),
    htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
    image: z.array(pageDocImageSchema).optional(),
    ins: z.array(pageDocMarkupSchema).optional(),
    latexOnly: z.array(z.string()).optional(),
    linebreak: z.array(pageDocEmptySchema).optional(),
    manOnly: z.array(z.string()).optional(),
    msc: z.array(pageDocDotMscSchema).optional(),
    plantuml: z.array(pageDocPlantumlSchema).optional(),
    ref: z.array(pageDocReferenceTextSchema).optional(),
    rtfOnly: z.array(z.string()).optional(),
    s: z.array(pageDocMarkupSchema).optional(),
    small: z.array(pageDocMarkupSchema).optional(),
    strike: z.array(pageDocMarkupSchema).optional(),
    subscript: z.array(pageDocMarkupSchema).optional(),
    superscript: z.array(pageDocMarkupSchema).optional(),
    uLink: z.array(pageDocURLLinkSchema).optional(),
    underline: z.array(pageDocMarkupSchema).optional(),
    xmlOnly: z.array(z.string()).optional(),
    blockquote: z.array(pageDocBlockQuoteSchema).optional(),
    copyDoc: z.array(pageDocCopySchema).optional(),
    details: z.array(pageDocDetailsSchema).optional(),
    diaFile: z.array(pageDocImageFileSchema).optional(),
    dotFile: z.array(pageDocImageFileSchema).optional(),
    heading: z.array(pageDocHeadingSchema).optional(),
    hRuler: z.array(pageDocEmptySchema).optional(),
    indexEntry: z.array(pageDocIndexEntrySchema).optional(),
    itemizedList: z.array(pageDocListSchema).optional(),
    javadocCode: z.array(z.string()).optional(),
    javadocLiteral: z.array(z.string()).optional(),
    language: z.array(pageDocLanguageSchema).optional(),
    orderedList: z.array(pageDocListSchema).optional(),
    parameterList: z.array(pageDocParameterListSchema).optional(),
    parBlock: z.array(pageDocParBlockSchema).optional(),
    plantumlFile: z.array(pageDocImageFileSchema).optional(),
    preformatted: z.array(pageDocMarkupSchema).optional(),
    programListing: z.array(pageProgramListingSchema).optional(),
    simpleSect: z.array(pageDocSimpleSectSchema).optional(),
    table: z.array(pageDocTableSchema).optional(),
    title: z.array(pageDocTitleSchema).optional(),
    tocList: z.array(pageDocTocListSchema).optional(),
    variableList: z.array(pageDocVariableListSchema).optional(),
    verbatim: z.array(z.string()).optional(),
    xRefSect: z.array(pageDocXRefSectSchema).optional(),
  }).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly || obj.blockquote || obj.copyDoc || obj.details || obj.diaFile || obj.dotFile || obj.heading || obj.hRuler || obj.indexEntry || obj.itemizedList || obj.javadocCode || obj.javadocLiteral || obj.language || obj.orderedList || obj.parameterList || obj.parBlock || obj.plantumlFile || obj.preformatted || obj.programListing || obj.simpleSect || obj.table || obj.title || obj.tocList || obj.variableList || obj.verbatim || obj.xRefSect, {
    message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly', 'blockquote', 'copyDoc', 'details', 'diaFile', 'dotFile', 'heading', 'hRuler', 'indexEntry', 'itemizedList', 'javadocCode', 'javadocLiteral', 'language', 'orderedList', 'parameterList', 'parBlock', 'plantumlFile', 'preformatted', 'programListing', 'simpleSect', 'table', 'title', 'tocList', 'variableList', 'verbatim', 'xRefSect' must be defined",
  }),
  )

export const pageDocImageFileSchema: z.ZodSchema<PageDocImageFile> = z.lazy(() => z.object({
  anchor: z.array(pageDocAnchorSchema).optional(),
  bold: z.array(pageDocMarkupSchema).optional(),
  center: z.array(pageDocMarkupSchema).optional(),
  cite: z.array(pageDocMarkupSchema).optional(),
  computerOutput: z.array(pageDocMarkupSchema).optional(),
  del: z.array(pageDocMarkupSchema).optional(),
  docbookOnly: z.array(z.string()).optional(),
  dot: z.array(pageDocDotMscSchema).optional(),
  emoji: z.array(pageDocEmojiSchema).optional(),
  emphasis: z.array(pageDocMarkupSchema).optional(),
  formula: z.array(pageDocFormulaSchema).optional(),
  htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
  image: z.array(pageDocImageSchema).optional(),
  ins: z.array(pageDocMarkupSchema).optional(),
  latexOnly: z.array(z.string()).optional(),
  linebreak: z.array(pageDocEmptySchema).optional(),
  manOnly: z.array(z.string()).optional(),
  msc: z.array(pageDocDotMscSchema).optional(),
  plantuml: z.array(pageDocPlantumlSchema).optional(),
  ref: z.array(pageDocReferenceTextSchema).optional(),
  rtfOnly: z.array(z.string()).optional(),
  s: z.array(pageDocMarkupSchema).optional(),
  small: z.array(pageDocMarkupSchema).optional(),
  strike: z.array(pageDocMarkupSchema).optional(),
  subscript: z.array(pageDocMarkupSchema).optional(),
  superscript: z.array(pageDocMarkupSchema).optional(),
  uLink: z.array(pageDocURLLinkSchema).optional(),
  underline: z.array(pageDocMarkupSchema).optional(),
  xmlOnly: z.array(z.string()).optional(),
  height: z.string().optional(),
  name: z.string().optional(),
  width: z.string().optional(),
}).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly || obj.height || obj.name || obj.width, {
  message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly', 'height', 'name', 'width' must be defined",
}),
)

export const pageDocHeadingSchema: z.ZodSchema<PageDocHeading> = z.lazy(() => z.object({
  anchor: z.array(pageDocAnchorSchema).optional(),
  bold: z.array(pageDocMarkupSchema).optional(),
  center: z.array(pageDocMarkupSchema).optional(),
  cite: z.array(pageDocMarkupSchema).optional(),
  computerOutput: z.array(pageDocMarkupSchema).optional(),
  del: z.array(pageDocMarkupSchema).optional(),
  docbookOnly: z.array(z.string()).optional(),
  dot: z.array(pageDocDotMscSchema).optional(),
  emoji: z.array(pageDocEmojiSchema).optional(),
  emphasis: z.array(pageDocMarkupSchema).optional(),
  formula: z.array(pageDocFormulaSchema).optional(),
  htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
  image: z.array(pageDocImageSchema).optional(),
  ins: z.array(pageDocMarkupSchema).optional(),
  latexOnly: z.array(z.string()).optional(),
  linebreak: z.array(pageDocEmptySchema).optional(),
  manOnly: z.array(z.string()).optional(),
  msc: z.array(pageDocDotMscSchema).optional(),
  plantuml: z.array(pageDocPlantumlSchema).optional(),
  ref: z.array(pageDocReferenceTextSchema).optional(),
  rtfOnly: z.array(z.string()).optional(),
  s: z.array(pageDocMarkupSchema).optional(),
  small: z.array(pageDocMarkupSchema).optional(),
  strike: z.array(pageDocMarkupSchema).optional(),
  subscript: z.array(pageDocMarkupSchema).optional(),
  superscript: z.array(pageDocMarkupSchema).optional(),
  uLink: z.array(pageDocURLLinkSchema).optional(),
  underline: z.array(pageDocMarkupSchema).optional(),
  xmlOnly: z.array(z.string()).optional(),
  level: z.number().optional(),
}).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly || obj.level, {
  message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly', 'level' must be defined",
}),
)

export const pageDocListSchema: z.ZodSchema<PageDocList> = z.lazy(() => z.object({
  items: z.array(pageDocListItemSchema).optional(),
  start: z.number().optional(),
  type: pageOlSchema.optional(),
}).refine(obj => obj.items || obj.start || obj.type, {
  message: "At least one of 'items', 'start', 'type' must be defined",
}),
)

export const pageDocLanguageSchema: z.ZodSchema<PageDocLanguage> = z.lazy(() => z.object({
  lang: z.string().optional(),
  paragraphs: z.array(pageDocParagraphSchema).optional(),
}).refine(obj => obj.lang || obj.paragraphs, {
  message: "At least one of 'lang', 'paragraphs' must be defined",
}),
)

export const pageDocParameterListSchema: z.ZodSchema<PageDocParameterList>
  = z.lazy(() => z.object({
    items: z.array(pageDocParameterListItemSchema).optional(),
    kind: pageParameterListKindSchema.optional(),
  }).refine(obj => obj.items || obj.kind, {
    message: "At least one of 'items', 'kind' must be defined",
  }),
  )

export const pageDocParBlockSchema: z.ZodSchema<PageDocParBlock> = z.lazy(() => z.object({
  paragraphs: z.array(pageDocParagraphSchema).optional(),
}).refine(obj => obj.paragraphs, {
  message: "At least one of 'paragraphs' must be defined",
}),
)

export const pageProgramListingSchema: z.ZodSchema<PageProgramListing> = z.lazy(() => z.object({
  codeLines: z.array(pageCodeLineSchema).optional(),
  filename: z.string().optional(),
}).refine(obj => obj.codeLines || obj.filename, {
  message: "At least one of 'codeLines', 'filename' must be defined",
}),
)

export const pageDocSimpleSectSchema: z.ZodSchema<PageDocSimpleSect> = z.lazy(() => z.object({
  kind: pageSimpleSectKindSchema.optional(),
  paragraphs: z.array(pageDocParagraphSchema).optional(),
  title: pageDocTitleSchema.optional(),
}).refine(obj => obj.kind || obj.paragraphs || obj.title, {
  message: "At least one of 'kind', 'paragraphs', 'title' must be defined",
}),
)

export const pageDocTableSchema: z.ZodSchema<PageDocTable> = z.lazy(() => z.object({
  caption: pageDocCaptionSchema.optional(),
  columnCount: z.number().optional(),
  rowCount: z.number().optional(),
  rows: z.array(pageDocRowSchema).optional(),
  width: z.string().optional(),
}).refine(obj => obj.caption || obj.columnCount || obj.rowCount || obj.rows || obj.width, {
  message: "At least one of 'caption', 'columnCount', 'rowCount', 'rows', 'width' must be defined",
}),
)

export const pageDocTitleSchema: z.ZodSchema<PageDocTitle> = z.lazy(() => z.object({
  anchor: z.array(pageDocAnchorSchema).optional(),
  bold: z.array(pageDocMarkupSchema).optional(),
  center: z.array(pageDocMarkupSchema).optional(),
  cite: z.array(pageDocMarkupSchema).optional(),
  computerOutput: z.array(pageDocMarkupSchema).optional(),
  del: z.array(pageDocMarkupSchema).optional(),
  docbookOnly: z.array(z.string()).optional(),
  dot: z.array(pageDocDotMscSchema).optional(),
  emoji: z.array(pageDocEmojiSchema).optional(),
  emphasis: z.array(pageDocMarkupSchema).optional(),
  formula: z.array(pageDocFormulaSchema).optional(),
  htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
  image: z.array(pageDocImageSchema).optional(),
  ins: z.array(pageDocMarkupSchema).optional(),
  latexOnly: z.array(z.string()).optional(),
  linebreak: z.array(pageDocEmptySchema).optional(),
  manOnly: z.array(z.string()).optional(),
  msc: z.array(pageDocDotMscSchema).optional(),
  plantuml: z.array(pageDocPlantumlSchema).optional(),
  ref: z.array(pageDocReferenceTextSchema).optional(),
  rtfOnly: z.array(z.string()).optional(),
  s: z.array(pageDocMarkupSchema).optional(),
  small: z.array(pageDocMarkupSchema).optional(),
  strike: z.array(pageDocMarkupSchema).optional(),
  subscript: z.array(pageDocMarkupSchema).optional(),
  superscript: z.array(pageDocMarkupSchema).optional(),
  uLink: z.array(pageDocURLLinkSchema).optional(),
  underline: z.array(pageDocMarkupSchema).optional(),
  xmlOnly: z.array(z.string()).optional(),
}).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly, {
  message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly' must be defined",
}),
)

export const pageDocTocListSchema: z.ZodSchema<PageDocTocList> = z.lazy(() => z.object({
  items: z.array(pageDocTocItemSchema).optional(),
}).refine(obj => obj.items, {
  message: "At least one of 'items' must be defined",
}),
)

export const pageDocVariableListSchema: z.ZodSchema<PageDocVariableList>
  = z.lazy(() => z.object({
    entries: z.array(pageDocVariableListEntrySchema).optional(),
    items: z.array(pageDocListItemSchema).optional(),
  }).refine(obj => obj.entries || obj.items, {
    message: "At least one of 'entries', 'items' must be defined",
  }),
  )

export const pageDocXRefSectSchema: z.ZodSchema<PageDocXRefSect> = z.lazy(() => z.object({
  description: pageDescriptionSchema.optional(),
  id: z.string().optional(),
  titles: z.array(z.string()).optional(),
}).refine(obj => obj.description || obj.id || obj.titles, {
  message: "At least one of 'description', 'id', 'titles' must be defined",
}),
)

export const pageDocListItemSchema: z.ZodSchema<PageDocListItem> = z.lazy(() => z.object({
  override: pageCheckSchema.optional(),
  paragraphs: z.array(pageDocParagraphSchema).optional(),
  value: z.number().optional(),
}).refine(obj => obj.override || obj.paragraphs || obj.value, {
  message: "At least one of 'override', 'paragraphs', 'value' must be defined",
}),
)

export const pageDocMarkupCommonSchema: z.ZodSchema<PageDocMarkupCommon>
  = z.lazy(() => z.object({
    anchor: z.array(pageDocAnchorSchema).optional(),
    bold: z.array(pageDocMarkupSchema).optional(),
    center: z.array(pageDocMarkupSchema).optional(),
    cite: z.array(pageDocMarkupSchema).optional(),
    computerOutput: z.array(pageDocMarkupSchema).optional(),
    del: z.array(pageDocMarkupSchema).optional(),
    docbookOnly: z.array(z.string()).optional(),
    dot: z.array(pageDocDotMscSchema).optional(),
    emoji: z.array(pageDocEmojiSchema).optional(),
    emphasis: z.array(pageDocMarkupSchema).optional(),
    formula: z.array(pageDocFormulaSchema).optional(),
    htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
    image: z.array(pageDocImageSchema).optional(),
    ins: z.array(pageDocMarkupSchema).optional(),
    latexOnly: z.array(z.string()).optional(),
    linebreak: z.array(pageDocEmptySchema).optional(),
    manOnly: z.array(z.string()).optional(),
    msc: z.array(pageDocDotMscSchema).optional(),
    plantuml: z.array(pageDocPlantumlSchema).optional(),
    ref: z.array(pageDocReferenceTextSchema).optional(),
    rtfOnly: z.array(z.string()).optional(),
    s: z.array(pageDocMarkupSchema).optional(),
    small: z.array(pageDocMarkupSchema).optional(),
    strike: z.array(pageDocMarkupSchema).optional(),
    subscript: z.array(pageDocMarkupSchema).optional(),
    superscript: z.array(pageDocMarkupSchema).optional(),
    uLink: z.array(pageDocURLLinkSchema).optional(),
    underline: z.array(pageDocMarkupSchema).optional(),
    xmlOnly: z.array(z.string()).optional(),
  }).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly, {
    message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly' must be defined",
  }),
  )

export const pageDocParameterListItemSchema: z.ZodSchema<PageDocParameterListItem>
  = z.lazy(() => z.object({
    description: pageDescriptionSchema.optional(),
    list: z.array(pageDocParameterNameListSchema).optional(),
  }).refine(obj => obj.description || obj.list, {
    message: "At least one of 'description', 'list' must be defined",
  }),
  )

export const pageDocParameterNameListSchema: z.ZodSchema<PageDocParameterNameList>
  = z.lazy(() => z.object({
    names: z.array(pageDocParameterNameSchema).optional(),
    types: z.array(pageDocParameterTypeSchema).optional(),
  }).refine(obj => obj.names || obj.types, {
    message: "At least one of 'names', 'types' must be defined",
  }),
  )

export const pageDocParameterNameSchema: z.ZodSchema<PageDocParameterName>
  = z.lazy(() => z.object({
    direction: pageParameterDirSchema.optional(),
    ref: pageDocReferenceTextSchema.optional(),
  }).refine(obj => obj.direction || obj.ref, {
    message: "At least one of 'direction', 'ref' must be defined",
  }),
  )

export const pageDocParameterTypeSchema: z.ZodSchema<PageDocParameterType>
  = z.lazy(() => z.object({
    ref: pageDocReferenceTextSchema.optional(),
  }).refine(obj => obj.ref, {
    message: "At least one of 'ref' must be defined",
  }),
  )

export const pageDocRowSchema: z.ZodSchema<PageDocRow> = z.lazy(() => z.object({
  entries: z.array(pageDocEntrySchema).optional(),
}).refine(obj => obj.entries, {
  message: "At least one of 'entries' must be defined",
}),
)

export const pageDocTocItemSchema: z.ZodSchema<PageDocTocItem> = z.lazy(() => z.object({
  anchor: z.array(pageDocAnchorSchema).optional(),
  bold: z.array(pageDocMarkupSchema).optional(),
  center: z.array(pageDocMarkupSchema).optional(),
  cite: z.array(pageDocMarkupSchema).optional(),
  computerOutput: z.array(pageDocMarkupSchema).optional(),
  del: z.array(pageDocMarkupSchema).optional(),
  docbookOnly: z.array(z.string()).optional(),
  dot: z.array(pageDocDotMscSchema).optional(),
  emoji: z.array(pageDocEmojiSchema).optional(),
  emphasis: z.array(pageDocMarkupSchema).optional(),
  formula: z.array(pageDocFormulaSchema).optional(),
  htmlOnly: z.array(pageDocHtmlOnlySchema).optional(),
  image: z.array(pageDocImageSchema).optional(),
  ins: z.array(pageDocMarkupSchema).optional(),
  latexOnly: z.array(z.string()).optional(),
  linebreak: z.array(pageDocEmptySchema).optional(),
  manOnly: z.array(z.string()).optional(),
  msc: z.array(pageDocDotMscSchema).optional(),
  plantuml: z.array(pageDocPlantumlSchema).optional(),
  ref: z.array(pageDocReferenceTextSchema).optional(),
  rtfOnly: z.array(z.string()).optional(),
  s: z.array(pageDocMarkupSchema).optional(),
  small: z.array(pageDocMarkupSchema).optional(),
  strike: z.array(pageDocMarkupSchema).optional(),
  subscript: z.array(pageDocMarkupSchema).optional(),
  superscript: z.array(pageDocMarkupSchema).optional(),
  uLink: z.array(pageDocURLLinkSchema).optional(),
  underline: z.array(pageDocMarkupSchema).optional(),
  xmlOnly: z.array(z.string()).optional(),
  id: z.string().optional(),
}).refine(obj => obj.anchor || obj.bold || obj.center || obj.cite || obj.computerOutput || obj.del || obj.docbookOnly || obj.dot || obj.emoji || obj.emphasis || obj.formula || obj.htmlOnly || obj.image || obj.ins || obj.latexOnly || obj.linebreak || obj.manOnly || obj.msc || obj.plantuml || obj.ref || obj.rtfOnly || obj.s || obj.small || obj.strike || obj.subscript || obj.superscript || obj.uLink || obj.underline || obj.xmlOnly || obj.id, {
  message: "At least one of 'anchor', 'bold', 'center', 'cite', 'computerOutput', 'del', 'docbookOnly', 'dot', 'emoji', 'emphasis', 'formula', 'htmlOnly', 'image', 'ins', 'latexOnly', 'linebreak', 'manOnly', 'msc', 'plantuml', 'ref', 'rtfOnly', 's', 'small', 'strike', 'subscript', 'superscript', 'uLink', 'underline', 'xmlOnly', 'id' must be defined",
}),
)

export const pageDocVariableListEntrySchema: z.ZodSchema<PageDocVariableListEntry>
  = z.lazy(() => z.object({
    term: pageDocTitleSchema.optional(),
  }).refine(obj => obj.term, {
    message: "At least one of 'term' must be defined",
  }),
  )

export const pageEnumValueSchema: z.ZodSchema<PageEnumValue> = z.lazy(() => z.object({
  briefDescription: pageDescriptionSchema.optional(),
  detailedDescription: pageDescriptionSchema.optional(),
  id: z.string().optional(),
  initializer: pageLinkedTextSchema.optional(),
  name: z.string().optional(),
  protection: pageProtectionKindSchema.optional(),
}).refine(obj => obj.briefDescription || obj.detailedDescription || obj.id || obj.initializer || obj.name || obj.protection, {
  message: "At least one of 'briefDescription', 'detailedDescription', 'id', 'initializer', 'name', 'protection' must be defined",
}),
)

export const pageLinkedTextSchema: z.ZodSchema<PageLinkedText> = z.lazy(() => z.object({
  ref: z.array(pageDocReferenceTextSchema).optional(),
}).refine(obj => obj.ref, {
  message: "At least one of 'ref' must be defined",
}),
)

export const pageSectionSchema: z.ZodSchema<PageSection> = z.lazy(() => z.object({
  description: pageDescriptionSchema.optional(),
  header: z.string().optional(),
  kind: pageSectionKindSchema.optional(),
  memberDefs: z.array(pageMemberDefSchema).optional(),
  members: z.array(pageMemberSchema).optional(),
}).refine(obj => obj.description || obj.header || obj.kind || obj.memberDefs || obj.members, {
  message: "At least one of 'description', 'header', 'kind', 'memberDefs', 'members' must be defined",
}),
)

export const pageTableOfContentsSchema: z.ZodSchema<PageTableOfContents>
  = z.lazy(() => z.object({
    contents: z.array(pageTableOfContentsSchema).optional(),
    sections: z.array(pageTableOfContentsSectionSchema).optional(),
  }).refine(obj => obj.contents || obj.sections, {
    message: "At least one of 'contents', 'sections' must be defined",
  }),
  )

export const pageTemplateParamListSchema: z.ZodSchema<PageTemplateParamList>
  = z.lazy(() => z.object({
    parameters: z.array(pageParameterSchema).optional(),
  }).refine(obj => obj.parameters, {
    message: "At least one of 'parameters' must be defined",
  }),
  )

export const pageMemberDefSchema: z.ZodSchema<PageMemberDef> = z.lazy(() => z.object({
  accessor: pageAccessorSchema.optional(),
  add: z.boolean().optional(),
  argsString: z.string().optional(),
  attribute: z.boolean().optional(),
  bitField: z.string().optional(),
  bound: z.boolean().optional(),
  briefDescription: pageDescriptionSchema.optional(),
  const: z.boolean().optional(),
  constEval: z.boolean().optional(),
  constExpr: z.boolean().optional(),
  constInit: z.boolean().optional(),
  constrained: z.boolean().optional(),
  definition: z.string().optional(),
  detailedDescription: pageDescriptionSchema.optional(),
  enumValue: z.array(pageEnumValueSchema).optional(),
  exceptions: pageLinkedTextSchema.optional(),
  explicit: z.boolean().optional(),
  extern: z.boolean().optional(),
  final: z.boolean().optional(),
  gettable: z.boolean().optional(),
  id: z.string().optional(),
  inBodyDescription: pageDescriptionSchema.optional(),
  initOnly: z.boolean().optional(),
  initializer: pageLinkedTextSchema.optional(),
  inline: z.boolean().optional(),
  kind: pageMemberKindSchema.optional(),
  location: pageLocationSchema.optional(),
  maybeAmbiguous: z.boolean().optional(),
  maybeDefault: z.boolean().optional(),
  maybeVoid: z.boolean().optional(),
  mutable: z.boolean().optional(),
  name: z.string().optional(),
  new: z.boolean().optional(),
  noDiscard: z.boolean().optional(),
  noexcept: z.boolean().optional(),
  noExceptExpression: z.string().optional(),
  optional: z.boolean().optional(),
  parameters: z.array(pageParameterSchema).optional(),
  privateGettable: z.boolean().optional(),
  privateSettable: z.boolean().optional(),
  property: z.boolean().optional(),
  protection: pageProtectionKindSchema.optional(),
  protectedGettable: z.boolean().optional(),
  protectedSettable: z.boolean().optional(),
  qualifiedName: z.string().optional(),
  qualifiers: z.array(z.string()).optional(),
  raise: z.boolean().optional(),
  read: z.string().optional(),
  readable: z.boolean().optional(),
  readonly: z.boolean().optional(),
  refQualifier: pageRefQualifierKindSchema.optional(),
  referencedBy: z.array(pageReferenceSchema).optional(),
  references: z.array(pageReferenceSchema).optional(),
  reimplementedBy: z.array(pageLinkedTextSchema).optional(),
  reimplements: z.array(pageLinkedTextSchema).optional(),
  removable: z.boolean().optional(),
  remove: z.boolean().optional(),
  required: z.boolean().optional(),
  requiresClause: pageLinkedTextSchema.optional(),
  sealed: z.boolean().optional(),
  settable: z.boolean().optional(),
  static: z.boolean().optional(),
  strong: z.boolean().optional(),
  templateParamList: pageTemplateParamListSchema.optional(),
  transient: z.boolean().optional(),
  type: pageLinkedTextSchema.optional(),
  virtual: pageVirtualKindSchema.optional(),
  volatile: z.boolean().optional(),
  writable: z.boolean().optional(),
  write: z.string().optional(),
}).refine(obj => obj.accessor || obj.add || obj.argsString || obj.attribute || obj.bitField || obj.bound || obj.briefDescription || obj.const || obj.constEval || obj.constExpr || obj.constInit || obj.constrained || obj.definition || obj.detailedDescription || obj.enumValue || obj.exceptions || obj.explicit || obj.extern || obj.final || obj.gettable || obj.id || obj.inBodyDescription || obj.initOnly || obj.initializer || obj.inline || obj.kind || obj.location || obj.maybeAmbiguous || obj.maybeDefault || obj.maybeVoid || obj.mutable || obj.name || obj.new || obj.noDiscard || obj.noexcept || obj.noExceptExpression || obj.optional || obj.parameters || obj.privateGettable || obj.privateSettable || obj.property || obj.protection || obj.protectedGettable || obj.protectedSettable || obj.qualifiedName || obj.qualifiers || obj.raise || obj.read || obj.readable || obj.readonly || obj.refQualifier || obj.referencedBy || obj.references || obj.reimplementedBy || obj.reimplements || obj.removable || obj.remove || obj.required || obj.requiresClause || obj.sealed || obj.settable || obj.static || obj.strong || obj.templateParamList || obj.transient || obj.type || obj.virtual || obj.volatile || obj.writable || obj.write, {
  message: "At least one of 'accessor', 'add', 'argsString', 'attribute', 'bitField', 'bound', 'briefDescription', 'const', 'constEval', 'constExpr', 'constInit', 'constrained', 'definition', 'detailedDescription', 'enumValue', 'exceptions', 'explicit', 'extern', 'final', 'gettable', 'id', 'inBodyDescription', 'initOnly', 'initializer', 'inline', 'kind', 'location', 'maybeAmbiguous', 'maybeDefault', 'maybeVoid', 'mutable', 'name', 'new', 'noDiscard', 'noexcept', 'noExceptExpression', 'optional', 'parameters', 'privateGettable', 'privateSettable', 'property', 'protection', 'protectedGettable', 'protectedSettable', 'qualifiedName', 'qualifiers', 'raise', 'read', 'readable', 'readonly', 'refQualifier', 'referencedBy', 'references', 'reimplementedBy', 'reimplements', 'removable', 'remove', 'required', 'requiresClause', 'sealed', 'settable', 'static', 'strong', 'templateParamList', 'transient', 'type', 'virtual', 'volatile', 'writable', 'write' must be defined",
}),
)

export const pageParameterSchema: z.ZodSchema<PageParameter> = z.lazy(() => z.object({
  array: z.string().optional(),
  attributes: z.string().optional(),
  briefDescription: pageDescriptionSchema.optional(),
  declName: z.string().optional(),
  defName: z.string().optional(),
  defVal: pageLinkedTextSchema.optional(),
  type: pageLinkedTextSchema.optional(),
  typeConstraint: pageLinkedTextSchema.optional(),
}).refine(obj => obj.array || obj.attributes || obj.briefDescription || obj.declName || obj.defName || obj.defVal || obj.type || obj.typeConstraint, {
  message: "At least one of 'array', 'attributes', 'briefDescription', 'declName', 'defName', 'defVal', 'type', 'typeConstraint' must be defined",
}),
)

export const pageTableOfContentsSectionSchema: z.ZodSchema<PageTableOfContentsSection>
  = z.lazy(() => z.object({
    contents: z.array(pageTableOfContentsSchema).optional(),
    docs: pageTableOfContentsNameSchema.optional(),
    name: z.string().optional(),
    reference: z.string().optional(),
  }).refine(obj => obj.contents || obj.docs || obj.name || obj.reference, {
    message: "At least one of 'contents', 'docs', 'name', 'reference' must be defined",
  }),
  )

export const pageTableOfContentsNameSchema: z.ZodSchema<PageTableOfContentsName>
  = z.lazy(() => z.object({
    paragraphs: z.array(pageDocParagraphSchema).optional(),
  }).refine(obj => obj.paragraphs, {
    message: "At least one of 'paragraphs' must be defined",
  }),
  )

export const xMLDocumentSchema: z.ZodSchema<XMLDocument> = z.lazy(() => z.object({
  doxyfile: doxyfileSchema.optional(),
  index: indexSchema.optional(),
  page: pageSchema.optional(),
}).refine(obj => obj.doxyfile || obj.index || obj.page, {
  message: "At least one of 'doxyfile', 'index', 'page' must be defined",
}),
)
